@page "/data-from-database"
@using BitcoinPriceTracking.BE.Shared.Models.DTOs
@using BitcoinPriceTracking.FE.Components
@using BitcoinPriceTracking.Modals
@using BitcoinPriceTracking.Modals.Models

@inherits BasePage

@if (_cryptoDataNotesDTO == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MDynamicTable T="CryptoDataNoteDTO"
                   Items="_cryptoDataNotesDTO"
                   ColumnOrder="_columnOrder"
                   ColumnWidths="_columnWidths"
                   IsButtonSave=true IsButtonDelete=true
                   OnSave="HandleSave"
                   OnDelete="HandleDelete" />
}

<QueryYesNoModal Title="Query"
                 QueryText="Chcete smazat záznam?"
                 ResultQueryChanged="onAfterCloseDeleteQueryResult"
                 @bind-ResultQueryModel="_resultQueryModel"
                 @bind-Visible="_isOpenDeleteQueryModal" />

@code {
    private bool _isOpenDeleteQueryModal = false;
    private ResultQueryModel _resultQueryModel;
    private IEnumerable<CryptoDataNoteDTO>? _cryptoDataNotesDTO;
    private List<string> _columnOrder = new List<string>
    {
        nameof(CryptoDataNoteDTO.Id),
        nameof(CryptoDataNoteDTO.TimeStamp),
        nameof(CryptoDataNoteDTO.Note),
        nameof(CryptoDataNoteDTO.CryptoData)
    };
    private Dictionary<string, string> _columnWidths = new Dictionary<string, string>
    {
        { nameof(CryptoDataNoteDTO.Id), "60px" },
        { nameof(CryptoDataNoteDTO.TimeStamp), "200px" },
        { nameof(CryptoDataNoteDTO.Note), "250px" }
    };

    protected override async Task OnInitializedAsync()
    {
        _cryptoDataNotesDTO = await loadData<IEnumerable<CryptoDataNoteDTO>>("api/v1/crypto-data-note");
    }

    private void HandleSave(CryptoDataNoteDTO cryptoDataNoteDTO)
    {

    }

    private void HandleDelete(CryptoDataNoteDTO cryptoDataNoteDTO)
    {
        _resultQueryModel = new ResultQueryModel()
            {
                Model = cryptoDataNoteDTO
            };
        _isOpenDeleteQueryModal = true;
    }

    private async Task onAfterCloseDeleteQueryResult()
    {
        try
        {
            var resultQuery = _resultQueryModel.ResultQuery;
            var existModel = _resultQueryModel.Model != null;
            if (resultQuery && _httpClient != null && existModel)
            {
                var cryptoDataNoteId = ((CryptoDataNoteDTO)_resultQueryModel.Model).Id;
                string urlApi = "api/v1/crypto-data-note/" + cryptoDataNoteId;
                var response = await _httpClient.DeleteAsync(urlApi);

                if (response != null && response.StatusCode == System.Net.HttpStatusCode.OK)
                {
                    _cryptoDataNotesDTO = await loadData<IEnumerable<CryptoDataNoteDTO>>("api/v1/crypto-data-note");
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            _eventLogService?.LogError(Guid.Parse("18f5f853-7b0d-4525-868f-323b2e74de47"), ex);
        }
    }
}
