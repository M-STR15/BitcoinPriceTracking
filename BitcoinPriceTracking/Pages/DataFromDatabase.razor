@page "/data-from-database"
@using BitcoinPriceTracking.BE.Shared.Models.DTOs
@using BitcoinPriceTracking.FE.Components

 @inherits BasePage

@if (_cryptoDataNotesDTO == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MDynamicTable T="CryptoDataNoteDTO"
                   Items="_cryptoDataNotesDTO"
                   ColumnOrder="_columnOrder"
                   ColumnWidths="_columnWidths"
                   IsButtonSave=true IsButtonDelete=true
                   OnSave="HandleSave"
                   OnDelete="HandleDelete" />
}

@code {
    private IEnumerable<CryptoDataNoteDTO>? _cryptoDataNotesDTO;
    private List<string> _columnOrder = new List<string>
    {
        nameof(CryptoDataNoteDTO.Id),
        nameof(CryptoDataNoteDTO.TimeStamp),
        nameof(CryptoDataNoteDTO.Note),
        nameof(CryptoDataNoteDTO.CryptoData)
    };
    private Dictionary<string, string> _columnWidths = new Dictionary<string, string>
    {
        { nameof(CryptoDataNoteDTO.Id), "60px" },
        { nameof(CryptoDataNoteDTO.TimeStamp), "200px" },
        { nameof(CryptoDataNoteDTO.Note), "250px" }
    };

    protected override async Task OnInitializedAsync()
    {
        _cryptoDataNotesDTO = await loadData<IEnumerable<CryptoDataNoteDTO>>("api/v1/crypto-data-note");
    }

    private void HandleSave(CryptoDataNoteDTO cryptoDataNoteDTO)
    {

    }

    private async void HandleDelete(CryptoDataNoteDTO cryptoDataNoteDTO)
    {
        if (_httpClient != null)
        {
            string urlApi = "api/v1/crypto-data-note/" + cryptoDataNoteDTO.Id;
            var response = await _httpClient.DeleteAsync(urlApi);

            if (response != null && response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                _cryptoDataNotesDTO = await loadData<IEnumerable<CryptoDataNoteDTO>>("api/v1/crypto-data-note");
                StateHasChanged();
            }
        }
    }
}
