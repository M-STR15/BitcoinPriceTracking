@page "/data-from-api"
@using BitcoinPriceTracking.BE.Shared.Models.DTOs
@using BitcoinPriceTracking.Data
@using System.Reflection
@using BitcoinPriceTracking.Enums

 @inherits BasePage

<PageTitle>Data from API</PageTitle>
<h1>Data form API</h1>

<style>
    .tabs button {
        padding: 10px 20px;
        margin-right: 5px;
        cursor: pointer;
    }

    .active-tab {
        background-color: #007bff;
        color: white;
    }

    .tab-content {
        margin-top: 20px;
    }
</style>

<ul class="nav nav-tabs" id="myTab" role="tablist">
    <li class="nav-item" role="presentation">
        <button class="@getTabClass(eTab.CryptoData)" @onclick="() => selectTab(eTab.CryptoData)">CRYPTO DATA</button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="@getTabClass(eTab.CnbData)" @onclick="() => selectTab(eTab.CnbData)">ČNB DATA</button>
    </li>
</ul>

<div class="tab-content mt-3">
    @if (selectedTab == eTab.CryptoData)
    {
        <p>Zobrazuje surová data z https://data-api.coindesk.com/spot/v1/latest/tick?market=coinbase&instruments=BTC-EUR</p>
        @if (_cryptoDataDto == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <button @onclick="addAddCryptoDataToDb_Click">Add actual data to database</button>
            <table class="table table-striped table-bordered">
                <tbody>
                    @if (_properties != null)
                    {
                        @foreach (var prop in _properties)
                        {
                            <tr>
                                <th>@prop.Name</th>
                                <td>@(prop.GetValue(_cryptoDataDto) ?? "-")</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        }
    }
    else if (selectedTab == eTab.CnbData)
    {
        <p>Zobrazuje surová data z </p>
    }
</div>

@code {
    private eTab selectedTab = eTab.CryptoData;
    private CryptoDataDto? _cryptoDataDto;
    private PropertyInfo[]? _properties = Array.Empty<PropertyInfo>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (_httpClient != null)
            {
                var response = await _httpClient.GetAsync("api/v1/crypto-data/buffer/BTC-EUC");

                if (response.StatusCode == System.Net.HttpStatusCode.OK)
                {
                    _cryptoDataDto = await response.Content.ReadFromJsonAsync<CryptoDataDto>();
                    if (_cryptoDataDto != null)
                        _properties = _cryptoDataDto.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance);
                }
            }
        }
        catch (Exception ex)
        {
            var test = ex;
        }
    }

    private string getTabClass(eTab tab) => tab == selectedTab ? "active-tab" : "";

    private void selectTab(eTab tab)
    {
        selectedTab = tab;
    }

    private async void addAddCryptoDataToDb_Click()
    {
        if (_httpClient != null)
        {
            var aaa = await _httpClient.PostAsJsonAsync<CryptoDataDto>("/api/v1/crypto-data/database", _cryptoDataDto);
        }
    }
}
