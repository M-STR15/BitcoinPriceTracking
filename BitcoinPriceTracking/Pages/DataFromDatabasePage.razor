@page "/data-from-database"
@using AutoMapper
@using BitcoinPriceTracking.BE.Shared.Models.DTOs
@using BitcoinPriceTracking.FE.Components
@using BitcoinPriceTracking.Modals
@using BitcoinPriceTracking.Modals.Models
@using BitcoinPriceTracking.Models.MVs

@inherits BasePage

@if (_cryptoDataNotesMV == null)
{
    <p><em><MLoader /></em></p>
}
else
{
    <MDynamicTable T="CryptoDataNoteMV"
                   Items="_cryptoDataNotesMV"
                   ColumnOrder="_columnOrder"
                   ColumnWidths="_columnWidths"
                   IsButtonSave=true IsButtonDelete=true
                   OnSave="HandleSave"
                   OnDelete="HandleDelete" />
}

<QueryYesNoModal Title="Query"
                 QueryText="Chcete smazat záznam?"
                 ResultQueryChanged="onAfterCloseDeleteQueryResult"
                 @bind-ResultQueryModel="_resultQueryModel"
                 @bind-Visible="_isOpenDeleteQueryModal" />

@code {
    [Inject]
    private IMapper _mapper { get; set; } = null!;

    private bool _isOpenDeleteQueryModal = false;
    private ResultQueryModel _resultQueryModel;
    private IEnumerable<CryptoDataNoteMV>? _cryptoDataNotesMV;
    private List<string> _columnOrder = new List<string>
    {
        nameof(CryptoDataNoteMV.Id),
        nameof(CryptoDataNoteMV.TimeStamp),
        nameof(CryptoDataNoteMV.Note),
        nameof(CryptoDataNoteMV.CryptoData)
    };
    private Dictionary<string, string> _columnWidths = new Dictionary<string, string>
    {
        { nameof(CryptoDataNoteMV.Id), "60px" },
        { nameof(CryptoDataNoteMV.TimeStamp), "200px" },
        { nameof(CryptoDataNoteMV.Note), "250px" }
    };

    protected override async Task OnInitializedAsync()
    {
        loadData();
    }

    private async void loadData()
    {
        var cryptoDataNotesDTO = await loadData<IEnumerable<CryptoDataNoteDTO>>("api/v1/crypto-data-note");
        _cryptoDataNotesMV = _mapper.Map<IEnumerable<CryptoDataNoteMV>>(cryptoDataNotesDTO);
        StateHasChanged();
    }
    private async void HandleSave(CryptoDataNoteMV cryptoDataNoteMV)
    {
        var cryptoDataNotesDTO = _mapper.Map<CryptoDataNoteDTO>(cryptoDataNoteMV);
        var cryptoDataNoteId = cryptoDataNotesDTO.Id;
        var result = _httpClient.PutAsJsonAsync<CryptoDataNoteDTO>($"api/v1/crypto-data-note/{cryptoDataNoteId}", cryptoDataNotesDTO);
    }

    private void HandleDelete(CryptoDataNoteMV cryptoDataNoteMV)
    {
        _resultQueryModel = new ResultQueryModel()
            {
                Model = cryptoDataNoteMV
            };
        _isOpenDeleteQueryModal = true;
    }

    private async Task onAfterCloseDeleteQueryResult()
    {
        try
        {
            var resultQuery = _resultQueryModel.ResultQuery;
            var existModel = _resultQueryModel.Model != null;
            if (resultQuery && _httpClient != null && existModel)
            {
                var cryptoDataId = ((CryptoDataNoteMV)_resultQueryModel.Model).CryptoDataId;
                string urlApi = "api/v1/crypto-data/" + cryptoDataId;
                var response = await _httpClient.DeleteAsync(urlApi);

                if (response != null && response.StatusCode == System.Net.HttpStatusCode.OK)
                {
                    loadData();
                }
            }
        }
        catch (Exception ex)
        {
            _eventLogService?.LogError(Guid.Parse("18f5f853-7b0d-4525-868f-323b2e74de47"), ex);
        }
    }
}
