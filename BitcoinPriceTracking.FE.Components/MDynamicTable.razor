@using System.Reflection
@using BitcoinPriceTracking.FE.Components.Interfaces
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@typeparam T

<style>
    .btn-fixed {
        width: 80px;
    }

    .tall-input {
        height: 40px;
        padding: 6px 12px; /* volitelné, aby text nebyl u okrajů */
        font-size: 16px; /* volitelné, větší text */
    }
</style>

@if (Item is not null)
{
    var props = getPropertiesInOrder();

    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                @foreach (var prop in props)
                {
                    @if (isSortable(prop))
                    {
                        <th style="@getWidthStyle(prop.Name)">
                            <button class="btn btn-sm btn-link p-0" @onclick="@(() => toggleSort(prop.Name))">
                                @prop.Name
                                @(SortColumn == prop.Name ? (SortAscending ? "▲" : "▼") : "")
                            </button>
                        </th>
                    }
                    else
                    {
                        <th>@prop.Name</th>
                    }
                }
                @if (IsButtonSave || IsButtonDelete)
                {
                    <th>Akce</th>
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                @foreach (var prop in props)
                {
                    var value = prop.GetValue(Item);
                    bool hasNested = value != null && !(value.GetType().IsPrimitive || value is string || value is DateTime);
                    string key = $"{Item.GetHashCode()}_{prop.Name}";

                    if (value is null)
                    {
                        <td></td>
                    }
                    else if (!hasNested)
                    {
                        @if (IsPropertyEditable<T>(prop.Name) && isEdit(Item))
                        {
                            <td>
                                <input type="text"
                                       class="form-control tall-input"
                                       value="@getPropertyValueAsString(Item, prop)"
                                       @oninput="(e => setPropertyValue(Item, prop, e.Value?.ToString()))" />
                            </td>
                        }
                        else
                        {
                            <td>@value</td>
                        }
                    }
                    else
                    {
                        <td>
                            <div>
                                <button class="btn btn-sm btn-outline-primary" @onclick="@(() => toggle(key))">
                                    @(isExpanded(key) ? "▼ Sbalit" : "▶ Rozbalit")
                                </button>

                                @if (isExpanded(key))
                                {
                                    <MTableForProperty Item="value" ColumnOrder="ColumnOrder" ColumnWidths="ColumnWidths" />
                                }
                            </div>
                        </td>
                    }
                }

                @if (IsButtonSave || IsButtonDelete)
                {
                    <td>
                        @if (IsButtonSave)
                        {
                            @if (isEdit(Item))
                            {
                                <button class="btn btn-sm btn-success me-1 btn-fixed" @onclick="@(() => onSaveClicked(Item))">Save</button>
                            }
                            else
                            {
                                <button class="btn btn-sm btn-info me-1 btn-fixed" @onclick="@(() => onEditClicked(Item))">Edit</button>
                            }
                        }

                        @if (IsButtonDelete)
                        {
                            <button class="btn btn-sm btn-danger btn-fixed" @onclick="@(() => onDeleteClicked(Item))">Delete</button>
                        }
                    </td>
                }
            </tr>
        </tbody>
    </table>
}
else if (Items is not null)
{
    var props = getPropertiesInOrder();

    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                @foreach (var prop in props)
                {
                    <th style="@getWidthStyle(prop.Name)">
                        @if (isSortable(prop))
                        {
                            <button class="btn btn-sm btn-link p-0" @onclick="@(() => toggleSort(prop.Name))">
                                @prop.Name
                                @(SortColumn == prop.Name ? (SortAscending ? "▲" : "▼") : "")
                            </button>
                        }
                        else
                        {
                            @prop.Name
                        }
                    </th>
                }
                @if (IsButtonSave || IsButtonDelete)
                {
                    <th>Akce</th>
                }
            </tr>
            <tr>
                @foreach (var prop in props)
                {
                    <th>
                        @if (isFilterable(prop))
                        {
                            <input class="form-control form-control-sm"
                                   placeholder="Filtrovat..."
                                   value="@GetFilterValue(prop.Name)"
                                   @oninput="(e => OnFilterChanged(prop.Name, e.Value?.ToString()))" />
                        }
                    </th>
                }
                @if (IsButtonSave || IsButtonDelete)
                {
                    <th></th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in ApplySortingAndFiltering(Items, props))
            {
                <tr>
                    @foreach (var prop in props)
                    {
                        var value = prop.GetValue(item);
                        bool hasNested = value != null && !(value.GetType().IsPrimitive || value is string || value is DateTime);
                        string key = $"{item.GetHashCode()}_{prop.Name}";

                        if (value is null)
                        {
                            <td></td>
                        }
                        else if (!hasNested)
                        {
                            @if (IsPropertyEditable<T>(prop.Name) && isEdit(item))
                            {
                                <td>
                                    <input type="text"
                                           class="form-control tall-input"
                                           value="@getPropertyValueAsString(item, prop)"
                                           @oninput="(e => setPropertyValue(item, prop, e.Value?.ToString()))" />
                                </td>
                            }
                            else
                            {
                                <td>@value</td>
                            }
                        }
                        else
                        {
                            <td>
                                <div>
                                    <button class="btn btn-sm btn-outline-primary" @onclick="@(() => toggle(key))">
                                        @(isExpanded(key) ? "▼ Sbalit" : "▶ Rozbalit")
                                    </button>

                                    @if (isExpanded(key))
                                    {
                                        <MTableForProperty Item="value" />
                                    }
                                </div>
                            </td>
                        }
                    }

                    @if (IsButtonSave || IsButtonDelete)
                    {
                        <td>
                            @if (IsButtonSave)
                            {
                                @if (isEdit(item))
                                {
                                    <button class="btn btn-sm btn-success me-1 btn-fixed" @onclick="@(() => onSaveClicked(item))">Save</button>
                                }
                                else
                                {
                                    <button class="btn btn-sm btn-info me-1 btn-fixed" @onclick="@(() => onEditClicked(item))">Edit</button>
                                }
                            }
                            @if (IsButtonDelete)
                            {
                                <button class="btn btn-sm btn-danger btn-fixed" @onclick="@(() => onDeleteClicked(item))">Delete</button>
                            }
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public T? Item { get; set; }
    [Parameter] public IEnumerable<T>? Items { get; set; }
    [Parameter] public List<string>? ColumnOrder { get; set; }
    [Parameter] public Dictionary<string, string>? ColumnWidths { get; set; }
    [Parameter] public bool IsButtonSave { get; set; }
    [Parameter] public bool IsButtonDelete { get; set; }
    [Parameter] public EventCallback<T> OnSave { get; set; }
    [Parameter] public EventCallback<T> OnDelete { get; set; }

    [Parameter] public string? SortColumn { get; set; }
    [Parameter] public bool SortAscending { get; set; } = true;

    private Dictionary<string, string> FilterTexts = new();

    private string getPropertyValueAsString(object item, PropertyInfo prop)
    {
        var value = prop.GetValue(item);
        return value?.ToString() ?? string.Empty;
    }

    private void setPropertyValue(object item, PropertyInfo prop, string newValue)
    {
        if (prop.PropertyType == typeof(string))
        {
            prop.SetValue(item, newValue);
        }
        else if (prop.PropertyType == typeof(int))
        {
            if (int.TryParse(newValue, out int intValue))
                prop.SetValue(item, intValue);
        }
        else if (prop.PropertyType == typeof(double))
        {
            if (double.TryParse(newValue, out double dblValue))
                prop.SetValue(item, dblValue);
        }
        // další typy podle potřeby
    }


    private PropertyInfo[] getPropertiesInOrder()
    {
        var allProps = typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instance);

        if (ColumnOrder == null || ColumnOrder.Count == 0)
            return allProps;

        return ColumnOrder
            .Select(name => allProps.FirstOrDefault(p => p.Name == name))
            .Where(p => p != null)
            .Cast<PropertyInfo>()
            .ToArray();
    }

    public static bool IsPropertyEditable<T>(string propertyName)
    {
        var prop = typeof(T).GetProperty(propertyName, BindingFlags.Public | BindingFlags.Instance);
        if (prop == null)
            return false;

        var attr = prop.GetCustomAttribute<EditableAttribute>();
        return attr?.AllowEdit ?? false; // když atribut chybí, bereme jako editovatelné
    }

    public static IEnumerable<PropertyInfo> GetEditableProperties<T>()
    {
        return typeof(T)
            .GetProperties(BindingFlags.Public | BindingFlags.Instance)
            .Where(p =>
            {
                var attr = p.GetCustomAttribute<EditableAttribute>();
                return attr?.AllowEdit ?? false; // když atribut chybí, bereme jako editovatelné
            });
    }

    private bool isEdit(T item)
    {
        var conMod = (IDynamicTableItem)item;
        return conMod.IsEdit;
    }

    private HashSet<string> _expanded = new();
    private bool isExpanded(string key) => _expanded.Contains(key);
    private void toggle(string key)
    {
        if (!_expanded.Add(key))
            _expanded.Remove(key);
    }

    private bool isSortable(PropertyInfo prop)
    {
        var type = prop.PropertyType;
        return type.IsPrimitive || type == typeof(string) || type == typeof(DateTime) || type == typeof(decimal);
    }

    private bool isFilterable(PropertyInfo prop) => isSortable(prop);

    private string getWidthStyle(string propName)
    {
        if (ColumnWidths != null && ColumnWidths.TryGetValue(propName, out var width))
            return $"width:{width};";
        return "";
    }

    private async Task onEditClicked(T item)
    {
        var itemMod = (IDynamicTableItem)item;
        itemMod.IsEdit = true;
    }

    private async Task onSaveClicked(T item)
    {
        if (OnSave.HasDelegate)
        {
            await OnSave.InvokeAsync(item);
            var itemMod = (IDynamicTableItem)item;
            itemMod.IsEdit = false;
        }
    }

    private async Task onDeleteClicked(T item)
    {
        if (OnDelete.HasDelegate)
            await OnDelete.InvokeAsync(item);
    }

    private void toggleSort(string column)
    {
        var prop = getPropertiesInOrder().FirstOrDefault(p => p.Name == column);
        if (prop == null || !isSortable(prop))
            return;

        if (SortColumn == column)
            SortAscending = !SortAscending;
        else
        {
            SortColumn = column;
            SortAscending = true;
        }
    }

    private IEnumerable<T> ApplySortingAndFiltering(IEnumerable<T>? items, PropertyInfo[] props)
    {
        if (items == null)
            return Enumerable.Empty<T>();

        var result = items;

        // Filtrování
        foreach (var filter in FilterTexts)
        {
            var prop = props.FirstOrDefault(p => p.Name == filter.Key && isFilterable(p));
            if (prop != null && !string.IsNullOrWhiteSpace(filter.Value))
            {
                string text = filter.Value.ToLowerInvariant();
                result = result.Where(item =>
                {
                    var val = prop.GetValue(item);
                    return val != null && val.ToString()!.ToLowerInvariant().Contains(text);
                });
            }
        }

        // Řazení
        if (!string.IsNullOrEmpty(SortColumn))
        {
            var prop = props.FirstOrDefault(p => p.Name == SortColumn && isSortable(p));
            if (prop != null)
            {
                result = SortAscending
                    ? result.OrderBy(item => prop.GetValue(item))
                    : result.OrderByDescending(item => prop.GetValue(item));
            }
        }

        return result;
    }

    private void OnFilterChanged(string propName, string? value)
    {
        if (string.IsNullOrWhiteSpace(value))
            FilterTexts.Remove(propName);
        else
            FilterTexts[propName] = value;

        StateHasChanged();
    }

    private string GetFilterValue(string propName)
        => FilterTexts.TryGetValue(propName, out var v) ? v : string.Empty;
}
