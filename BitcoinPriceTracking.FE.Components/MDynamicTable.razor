@using System.Reflection
@typeparam T

@if (Item is not null)
{
    var props = GetPropertiesInOrder();

    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                @foreach (var prop in props)
                {
                    @if (IsSortable(prop))
                    {
                        <th style="@getWidthStyle(prop.Name)">
                            <button class="btn btn-sm btn-link p-0" @onclick="@(() => ToggleSort(prop.Name))">
                                @prop.Name
                                @(SortColumn == prop.Name ? (SortAscending ? "▲" : "▼") : "")
                            </button>
                        </th>
                    }
                    else
                    {
                        <th>@prop.Name</th>
                    }
                }
                @if (IsButtonSave || IsButtonDelete)
                {
                    <th>Akce</th>
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                @foreach (var prop in props)
                {
                    var value = prop.GetValue(Item);
                    bool hasNested = value != null && !(value.GetType().IsPrimitive || value is string || value is DateTime);
                    string key = $"{Item.GetHashCode()}_{prop.Name}";

                    if (value is null)
                    {
                        <td></td>
                    }
                    else if (!hasNested)
                    {
                        <td>@value</td>
                    }
                    else
                    {
                        <td>
                            <div>
                                <button class="btn btn-sm btn-outline-primary" @onclick="@(() => toggle(key))">
                                    @(isExpanded(key) ? "▼ Sbalit" : "▶ Rozbalit")
                                </button>

                                @if (isExpanded(key))
                                {
                                    <MTableForProperty Item="value" ColumnOrder="ColumnOrder" ColumnWidths="ColumnWidths" />
                                }
                            </div>
                        </td>
                    }
                }

                @if (IsButtonSave || IsButtonDelete)
                {
                    <td>
                        @if (IsButtonSave)
                        {
                            <button class="btn btn-sm btn-success me-1" @onclick="@(() => OnSaveClicked(Item))">Save</button>
                        }
                        @if (IsButtonDelete)
                        {
                            <button class="btn btn-sm btn-danger" @onclick="@(() => OnDeleteClicked(Item))">Delete</button>
                        }
                    </td>
                }
            </tr>
        </tbody>
    </table>
}
else if (Items is not null)
{
    var props = GetPropertiesInOrder();

    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                @foreach (var prop in props)
                {
                    <th style="@getWidthStyle(prop.Name)">
                        <button class="btn btn-sm btn-link p-0" @onclick="@(() => ToggleSort(prop.Name))">
                            @prop.Name
                            @(SortColumn == prop.Name ? (SortAscending ? "▲" : "▼") : "")
                        </button>
                    </th>
                }
                @if (IsButtonSave || IsButtonDelete)
                {
                    <th>
                        <button class="btn btn-sm btn-link p-0">
                            Akce
                        </button>
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in ApplySortingAndFiltering(Items, props))
            {
                <tr>
                    @foreach (var prop in props)
                    {
                        var value = prop.GetValue(item);
                        bool hasNested = value != null && !(value.GetType().IsPrimitive || value is string || value is DateTime);
                        string key = $"{item.GetHashCode()}_{prop.Name}";

                        if (value is null)
                        {
                            <td></td>
                        }
                        else if (!hasNested)
                        {
                            <td>@value</td>
                        }
                        else
                        {
                            <td>
                                <div>
                                    <button class="btn btn-sm btn-outline-primary" @onclick="@(() => toggle(key))">
                                        @(isExpanded(key) ? "▼ Sbalit" : "▶ Rozbalit")
                                    </button>

                                    @if (isExpanded(key))
                                    {
                                        <MTableForProperty Item="value" />
                                    }
                                </div>
                            </td>
                        }
                    }

                    @if (IsButtonSave || IsButtonDelete)
                    {
                        <td>
                            @if (IsButtonSave)
                            {
                                <button class="btn btn-sm btn-success me-1" @onclick="@(() => OnSaveClicked(item))">Save</button>
                            }
                            @if (IsButtonDelete)
                            {
                                <button class="btn btn-sm btn-danger" @onclick="@(() => OnDeleteClicked(item))">Delete</button>
                            }
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public T? Item { get; set; }
    [Parameter] public IEnumerable<T>? Items { get; set; }
    [Parameter] public List<string>? ColumnOrder { get; set; }
    [Parameter] public Dictionary<string, string>? ColumnWidths { get; set; }
    [Parameter] public bool IsButtonSave { get; set; }
    [Parameter] public bool IsButtonDelete { get; set; }
    [Parameter] public EventCallback<T> OnSave { get; set; }
    [Parameter] public EventCallback<T> OnDelete { get; set; }

    [Parameter] public string? SortColumn { get; set; }
    [Parameter] public bool SortAscending { get; set; } = true;
    [Parameter] public Dictionary<string, Func<object, bool>>? Filters { get; set; }

    private PropertyInfo[] GetPropertiesInOrder()
    {
        var allProps = typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instance);

        if (ColumnOrder == null || ColumnOrder.Count == 0)
            return allProps;

        return ColumnOrder
        .Select(name => allProps.FirstOrDefault(p => p.Name == name))
        .Where(p => p != null)
        .Cast<PropertyInfo>()
        .ToArray();
    }

    private HashSet<string> _expanded = new();
    private bool isExpanded(string key) => _expanded.Contains(key);
    private void toggle(string key)
    {
        if (!_expanded.Add(key))
            _expanded.Remove(key);
    }

    private bool IsSortable(PropertyInfo prop)
    {
        var type = prop.PropertyType;
        return type.IsPrimitive || type == typeof(string) || type == typeof(DateTime) || type == typeof(decimal);
    }

    private string getWidthStyle(string propName)
    {
        if (ColumnWidths != null && ColumnWidths.TryGetValue(propName, out var width))
            return $"width:{width};";
        return "";
    }

    private async Task OnSaveClicked(T item)
    {
        if (OnSave.HasDelegate)
            await OnSave.InvokeAsync(item);
    }

    private async Task OnDeleteClicked(T item)
    {
        if (OnDelete.HasDelegate)
            await OnDelete.InvokeAsync(item);
    }

    private void ToggleSort(string column)
    {
        var prop = GetPropertiesInOrder().FirstOrDefault(p => p.Name == column);
        if (prop == null || !IsSortable(prop))
            return; // ignoruj nestorovatelné sloupce

        if (SortColumn == column)
            SortAscending = !SortAscending;
        else
        {
            SortColumn = column;
            SortAscending = true;
        }
    }

    private IEnumerable<T> ApplySortingAndFiltering(IEnumerable<T>? items, PropertyInfo[] props)
    {
        if (items == null)
            return Enumerable.Empty<T>();

        var result = items;

        // Filtrování podle viditelných sloupců
        if (Filters != null && Filters.Any())
        {
            foreach (var filter in Filters)
            {
                var prop = props.FirstOrDefault(p => p.Name == filter.Key);
                if (prop != null)
                    result = result.Where(item => filter.Value(prop.GetValue(item)!));
            }
        }

        // Řazení podle viditelných sloupců
        if (!string.IsNullOrEmpty(SortColumn))
        {
            var prop = props.FirstOrDefault(p => p.Name == SortColumn);
            if (prop != null)
                result = SortAscending
                ? result.OrderBy(item => prop.GetValue(item))
                : result.OrderByDescending(item => prop.GetValue(item));
        }

        return result;
    }
                        }
