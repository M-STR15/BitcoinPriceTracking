@using System.Reflection
@using BitcoinPriceTracking.FE.Components.Interfaces
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@typeparam T

<style>
    .btn-fixed {
        width: 80px;
    }

    .tall-input {
        height: 40px;
        padding: 6px 12px; /* volitelné, aby text nebyl u okrajů */
        font-size: 16px; /* volitelné, větší text */
    }
</style>

@if (Item is not null)
{
    var props = getPropertiesInOrder();

    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                @foreach (var prop in props)
                {
                    @if (isSortable(prop))
                    {
                        <th style="@getWidthStyle(prop.Name)">
                            <button class="btn btn-sm btn-link p-0" @onclick="@(() => toggleSort(prop.Name))">
                                @prop.Name
                                @(SortColumn == prop.Name ? (SortAscending ? "▲" : "▼") : "")
                            </button>
                        </th>
                    }
                    else
                    {
                        <th>@prop.Name</th>
                    }
                }
                @if (IsButtonSave || IsButtonDelete)
                {
                    <th>Akce</th>
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                @foreach (var prop in props)
                {
                    var value = prop.GetValue(Item);
                    bool hasNested = value != null && !(value.GetType().IsPrimitive || value is string || value is DateTime);
                    string key = $"{Item.GetHashCode()}_{prop.Name}";

                    if (value is null)
                    {
                        <td></td>
                    }
                    else if (!hasNested)
                    {
                        @if (IsPropertyEditable<T>(prop.Name) && isEdit(Item))
                        {
                            <td>
                                <input type="text"
                                       class="form-control tall-input"
                                       value="@getPropertyValueAsString(Item, prop)"
                                       @oninput="(e => setPropertyValue(Item, prop, e.Value?.ToString()))" />
                            </td>
                        }
                        else
                        {
                            <td>@value</td>
                        }
                    }
                    else
                    {
                        <td>
                            <div>
                                <button class="btn btn-sm btn-outline-primary" @onclick="@(() => toggle(key))">
                                    @(isExpanded(key) ? "▼ Sbalit" : "▶ Rozbalit")
                                </button>

                                @if (isExpanded(key))
                                {
                                    <MTableForProperty Item="value" ColumnOrder="ColumnOrder" ColumnWidths="ColumnWidths" />
                                }
                            </div>
                        </td>
                    }
                }

                @if (IsButtonSave || IsButtonDelete)
                {
                    <td>
                        @if (IsButtonSave)
                        {
                            @if (isEdit(Item))
                            {
                                <button class="btn btn-sm btn-success me-1 btn-fixed" @onclick="@(() => onSaveClicked(Item))">Save</button>
                            }
                            else
                            {
                                <button class="btn btn-sm btn-info me-1 btn-fixed" @onclick="@(() => onEditClicked(Item))">Edit</button>
                            }
                        }

                        @if (IsButtonDelete)
                        {
                            <button class="btn btn-sm btn-danger btn-fixed" @onclick="@(() => onDeleteClicked(Item))">Delete</button>
                        }
                    </td>
                }
            </tr>
        </tbody>
    </table>
}
else if (Items is not null)
{
    var props = getPropertiesInOrder();

    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                @foreach (var prop in props)
                {
                    <th style="@getWidthStyle(prop.Name)">
                        @if (isSortable(prop))
                        {
                            <button class="btn btn-sm btn-link p-0" @onclick="@(() => toggleSort(prop.Name))">
                                @prop.Name
                                @(SortColumn == prop.Name ? (SortAscending ? "▲" : "▼") : "")
                            </button>
                        }
                        else
                        {
                            @prop.Name
                        }
                    </th>
                }
                @if (IsButtonSave || IsButtonDelete)
                {
                    <th>Akce</th>
                }
            </tr>
            <tr>
                @foreach (var prop in props)
                {
                    <th>
                        @if (isFilterable(prop))
                        {
                            <input class="form-control form-control-sm"
                                   placeholder="Filtrovat..."
                                   value="@GetFilterValue(prop.Name)"
                                   @oninput="(e => OnFilterChanged(prop.Name, e.Value?.ToString()))" />
                        }
                    </th>
                }
                @if (IsButtonSave || IsButtonDelete)
                {
                    <th></th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in ApplySortingAndFiltering(Items, props))
            {
                <tr>
                    @foreach (var prop in props)
                    {
                        var value = prop.GetValue(item);
                        bool hasNested = value != null && !(value.GetType().IsPrimitive || value is string || value is DateTime);
                        string key = $"{item.GetHashCode()}_{prop.Name}";

                        if (value is null)
                        {
                            <td></td>
                        }
                        else if (!hasNested)
                        {
                            @if (IsPropertyEditable<T>(prop.Name) && isEdit(item))
                            {
                                <td>
                                    <input type="text"
                                           class="form-control tall-input"
                                           value="@getPropertyValueAsString(item, prop)"
                                           @oninput="(e => setPropertyValue(item, prop, e.Value?.ToString()))" />
                                </td>
                            }
                            else
                            {
                                <td>@value</td>
                            }
                        }
                        else
                        {
                            <td>
                                <div>
                                    <button class="btn btn-sm btn-outline-primary" @onclick="@(() => toggle(key))">
                                        @(isExpanded(key) ? "▼ Sbalit" : "▶ Rozbalit")
                                    </button>

                                    @if (isExpanded(key))
                                    {
                                        <MTableForProperty Item="value" />
                                    }
                                </div>
                            </td>
                        }
                    }

                    @if (IsButtonSave || IsButtonDelete)
                    {
                        <td>
                            @if (IsButtonSave)
                            {
                                @if (isEdit(item))
                                {
                                    <button class="btn btn-sm btn-success me-1 btn-fixed" @onclick="@(() => onSaveClicked(item))">Save</button>
                                }
                                else
                                {
                                    <button class="btn btn-sm btn-info me-1 btn-fixed" @onclick="@(() => onEditClicked(item))">Edit</button>
                                }
                            }
                            @if (IsButtonDelete)
                            {
                                <button class="btn btn-sm btn-danger btn-fixed" @onclick="@(() => onDeleteClicked(item))">Delete</button>
                            }
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}
